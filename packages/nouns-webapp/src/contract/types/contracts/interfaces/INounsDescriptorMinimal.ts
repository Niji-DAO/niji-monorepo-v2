/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace INounsSeeder {
  export type SeedStruct = {
    background: PromiseOrValue<BigNumberish>;
    backDecoration: PromiseOrValue<BigNumberish>;
    backgroundDecoration: PromiseOrValue<BigNumberish>;
    special: PromiseOrValue<BigNumberish>;
    leftHand: PromiseOrValue<BigNumberish>;
    back: PromiseOrValue<BigNumberish>;
    clothe: PromiseOrValue<BigNumberish>;
    choker: PromiseOrValue<BigNumberish>;
    ear: PromiseOrValue<BigNumberish>;
    hair: PromiseOrValue<BigNumberish>;
    hat: PromiseOrValue<BigNumberish>;
    headphone: PromiseOrValue<BigNumberish>;
  };

  export type SeedStructOutput = [
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number
  ] & {
    background: number;
    backDecoration: number;
    backgroundDecoration: number;
    special: number;
    leftHand: number;
    back: number;
    clothe: number;
    choker: number;
    ear: number;
    hair: number;
    hat: number;
    headphone: number;
  };
}

export interface INounsDescriptorMinimalInterface extends utils.Interface {
  functions: {
    "backCount()": FunctionFragment;
    "backDecorationCount()": FunctionFragment;
    "backgroundCount()": FunctionFragment;
    "backgroundDecorationCount()": FunctionFragment;
    "chokerCount()": FunctionFragment;
    "clotheCount()": FunctionFragment;
    "dataURI(uint256,(uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48))": FunctionFragment;
    "earCount()": FunctionFragment;
    "hairCount()": FunctionFragment;
    "hatCount()": FunctionFragment;
    "headphoneCount()": FunctionFragment;
    "leftHandCount()": FunctionFragment;
    "specialCount()": FunctionFragment;
    "tokenURI(uint256,(uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "backCount"
      | "backDecorationCount"
      | "backgroundCount"
      | "backgroundDecorationCount"
      | "chokerCount"
      | "clotheCount"
      | "dataURI"
      | "earCount"
      | "hairCount"
      | "hatCount"
      | "headphoneCount"
      | "leftHandCount"
      | "specialCount"
      | "tokenURI"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "backCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "backDecorationCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "backgroundCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "backgroundDecorationCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chokerCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "clotheCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dataURI",
    values: [PromiseOrValue<BigNumberish>, INounsSeeder.SeedStruct]
  ): string;
  encodeFunctionData(functionFragment: "earCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "hairCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "hatCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "headphoneCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "leftHandCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "specialCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [PromiseOrValue<BigNumberish>, INounsSeeder.SeedStruct]
  ): string;

  decodeFunctionResult(functionFragment: "backCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "backDecorationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "backgroundCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "backgroundDecorationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chokerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clotheCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dataURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "earCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hairCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hatCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "headphoneCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "leftHandCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "specialCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;

  events: {};
}

export interface INounsDescriptorMinimal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: INounsDescriptorMinimalInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    backCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    backDecorationCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    backgroundCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    backgroundDecorationCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    chokerCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    clotheCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    dataURI(
      tokenId: PromiseOrValue<BigNumberish>,
      seed: INounsSeeder.SeedStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    earCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    hairCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    hatCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    headphoneCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    leftHandCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    specialCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      seed: INounsSeeder.SeedStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  backCount(overrides?: CallOverrides): Promise<BigNumber>;

  backDecorationCount(overrides?: CallOverrides): Promise<BigNumber>;

  backgroundCount(overrides?: CallOverrides): Promise<BigNumber>;

  backgroundDecorationCount(overrides?: CallOverrides): Promise<BigNumber>;

  chokerCount(overrides?: CallOverrides): Promise<BigNumber>;

  clotheCount(overrides?: CallOverrides): Promise<BigNumber>;

  dataURI(
    tokenId: PromiseOrValue<BigNumberish>,
    seed: INounsSeeder.SeedStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  earCount(overrides?: CallOverrides): Promise<BigNumber>;

  hairCount(overrides?: CallOverrides): Promise<BigNumber>;

  hatCount(overrides?: CallOverrides): Promise<BigNumber>;

  headphoneCount(overrides?: CallOverrides): Promise<BigNumber>;

  leftHandCount(overrides?: CallOverrides): Promise<BigNumber>;

  specialCount(overrides?: CallOverrides): Promise<BigNumber>;

  tokenURI(
    tokenId: PromiseOrValue<BigNumberish>,
    seed: INounsSeeder.SeedStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    backCount(overrides?: CallOverrides): Promise<BigNumber>;

    backDecorationCount(overrides?: CallOverrides): Promise<BigNumber>;

    backgroundCount(overrides?: CallOverrides): Promise<BigNumber>;

    backgroundDecorationCount(overrides?: CallOverrides): Promise<BigNumber>;

    chokerCount(overrides?: CallOverrides): Promise<BigNumber>;

    clotheCount(overrides?: CallOverrides): Promise<BigNumber>;

    dataURI(
      tokenId: PromiseOrValue<BigNumberish>,
      seed: INounsSeeder.SeedStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    earCount(overrides?: CallOverrides): Promise<BigNumber>;

    hairCount(overrides?: CallOverrides): Promise<BigNumber>;

    hatCount(overrides?: CallOverrides): Promise<BigNumber>;

    headphoneCount(overrides?: CallOverrides): Promise<BigNumber>;

    leftHandCount(overrides?: CallOverrides): Promise<BigNumber>;

    specialCount(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      seed: INounsSeeder.SeedStruct,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    backCount(overrides?: CallOverrides): Promise<BigNumber>;

    backDecorationCount(overrides?: CallOverrides): Promise<BigNumber>;

    backgroundCount(overrides?: CallOverrides): Promise<BigNumber>;

    backgroundDecorationCount(overrides?: CallOverrides): Promise<BigNumber>;

    chokerCount(overrides?: CallOverrides): Promise<BigNumber>;

    clotheCount(overrides?: CallOverrides): Promise<BigNumber>;

    dataURI(
      tokenId: PromiseOrValue<BigNumberish>,
      seed: INounsSeeder.SeedStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    earCount(overrides?: CallOverrides): Promise<BigNumber>;

    hairCount(overrides?: CallOverrides): Promise<BigNumber>;

    hatCount(overrides?: CallOverrides): Promise<BigNumber>;

    headphoneCount(overrides?: CallOverrides): Promise<BigNumber>;

    leftHandCount(overrides?: CallOverrides): Promise<BigNumber>;

    specialCount(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      seed: INounsSeeder.SeedStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    backCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    backDecorationCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    backgroundCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    backgroundDecorationCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chokerCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    clotheCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dataURI(
      tokenId: PromiseOrValue<BigNumberish>,
      seed: INounsSeeder.SeedStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    earCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hairCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hatCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    headphoneCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    leftHandCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    specialCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      seed: INounsSeeder.SeedStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
