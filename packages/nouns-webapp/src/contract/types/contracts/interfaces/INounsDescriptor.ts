/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace INounsSeeder {
  export type SeedStruct = {
    background: PromiseOrValue<BigNumberish>;
    backDecoration: PromiseOrValue<BigNumberish>;
    backgroundDecoration: PromiseOrValue<BigNumberish>;
    special: PromiseOrValue<BigNumberish>;
    leftHand: PromiseOrValue<BigNumberish>;
    back: PromiseOrValue<BigNumberish>;
    clothe: PromiseOrValue<BigNumberish>;
    choker: PromiseOrValue<BigNumberish>;
    ear: PromiseOrValue<BigNumberish>;
    hair: PromiseOrValue<BigNumberish>;
    hat: PromiseOrValue<BigNumberish>;
    headphone: PromiseOrValue<BigNumberish>;
  };

  export type SeedStructOutput = [
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number
  ] & {
    background: number;
    backDecoration: number;
    backgroundDecoration: number;
    special: number;
    leftHand: number;
    back: number;
    clothe: number;
    choker: number;
    ear: number;
    hair: number;
    hat: number;
    headphone: number;
  };
}

export interface INounsDescriptorInterface extends utils.Interface {
  functions: {
    "addBack(bytes)": FunctionFragment;
    "addBackDecoration(bytes)": FunctionFragment;
    "addBackground(string)": FunctionFragment;
    "addBackgroundDecoration(bytes)": FunctionFragment;
    "addChoker(bytes)": FunctionFragment;
    "addClothes(bytes)": FunctionFragment;
    "addColorToPalette(uint8,string)": FunctionFragment;
    "addEar(bytes)": FunctionFragment;
    "addHair(bytes)": FunctionFragment;
    "addHat(bytes)": FunctionFragment;
    "addHeadphone(bytes)": FunctionFragment;
    "addLeftHand(bytes)": FunctionFragment;
    "addManyBackDecorations(bytes[])": FunctionFragment;
    "addManyBackgroundDecorations(bytes[])": FunctionFragment;
    "addManyBackgrounds(string[])": FunctionFragment;
    "addManyBacks(bytes[])": FunctionFragment;
    "addManyChokers(bytes[])": FunctionFragment;
    "addManyClothes(bytes[])": FunctionFragment;
    "addManyColorsToPalette(uint8,string[])": FunctionFragment;
    "addManyEars(bytes[])": FunctionFragment;
    "addManyHairs(bytes[])": FunctionFragment;
    "addManyHats(bytes[])": FunctionFragment;
    "addManyHeadphones(bytes[])": FunctionFragment;
    "addManyLeftHands(bytes[])": FunctionFragment;
    "addManySpecials(bytes[])": FunctionFragment;
    "addSpecial(bytes)": FunctionFragment;
    "arePartsLocked()": FunctionFragment;
    "backCount()": FunctionFragment;
    "backDecorationCount()": FunctionFragment;
    "backDecorations(uint256)": FunctionFragment;
    "backgroundCount()": FunctionFragment;
    "backgroundDecorationCount()": FunctionFragment;
    "backgroundDecorations(uint256)": FunctionFragment;
    "backgrounds(uint256)": FunctionFragment;
    "backs(uint256)": FunctionFragment;
    "baseURI()": FunctionFragment;
    "chokerCount()": FunctionFragment;
    "chokers(uint256)": FunctionFragment;
    "clotheCount()": FunctionFragment;
    "clothes(uint256)": FunctionFragment;
    "dataURI(uint256,(uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48))": FunctionFragment;
    "earCount()": FunctionFragment;
    "ears(uint256)": FunctionFragment;
    "generateSVGImage((uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48))": FunctionFragment;
    "genericDataURI(string,string,(uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48))": FunctionFragment;
    "hairCount()": FunctionFragment;
    "hairs(uint256)": FunctionFragment;
    "hatCount()": FunctionFragment;
    "hats(uint256)": FunctionFragment;
    "headphoneCount()": FunctionFragment;
    "headphones(uint256)": FunctionFragment;
    "isDataURIEnabled()": FunctionFragment;
    "leftHandCount()": FunctionFragment;
    "leftHands(uint256)": FunctionFragment;
    "lockParts()": FunctionFragment;
    "palettes(uint8,uint256)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "specialCount()": FunctionFragment;
    "specials(uint256)": FunctionFragment;
    "toggleDataURIEnabled()": FunctionFragment;
    "tokenURI(uint256,(uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48,uint48))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addBack"
      | "addBackDecoration"
      | "addBackground"
      | "addBackgroundDecoration"
      | "addChoker"
      | "addClothes"
      | "addColorToPalette"
      | "addEar"
      | "addHair"
      | "addHat"
      | "addHeadphone"
      | "addLeftHand"
      | "addManyBackDecorations"
      | "addManyBackgroundDecorations"
      | "addManyBackgrounds"
      | "addManyBacks"
      | "addManyChokers"
      | "addManyClothes"
      | "addManyColorsToPalette"
      | "addManyEars"
      | "addManyHairs"
      | "addManyHats"
      | "addManyHeadphones"
      | "addManyLeftHands"
      | "addManySpecials"
      | "addSpecial"
      | "arePartsLocked"
      | "backCount"
      | "backDecorationCount"
      | "backDecorations"
      | "backgroundCount"
      | "backgroundDecorationCount"
      | "backgroundDecorations"
      | "backgrounds"
      | "backs"
      | "baseURI"
      | "chokerCount"
      | "chokers"
      | "clotheCount"
      | "clothes"
      | "dataURI"
      | "earCount"
      | "ears"
      | "generateSVGImage"
      | "genericDataURI"
      | "hairCount"
      | "hairs"
      | "hatCount"
      | "hats"
      | "headphoneCount"
      | "headphones"
      | "isDataURIEnabled"
      | "leftHandCount"
      | "leftHands"
      | "lockParts"
      | "palettes"
      | "setBaseURI"
      | "specialCount"
      | "specials"
      | "toggleDataURIEnabled"
      | "tokenURI"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addBack",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "addBackDecoration",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "addBackground",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addBackgroundDecoration",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "addChoker",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "addClothes",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "addColorToPalette",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addEar",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "addHair",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "addHat",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "addHeadphone",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "addLeftHand",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "addManyBackDecorations",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addManyBackgroundDecorations",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addManyBackgrounds",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addManyBacks",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addManyChokers",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addManyClothes",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addManyColorsToPalette",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addManyEars",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addManyHairs",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addManyHats",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addManyHeadphones",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addManyLeftHands",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addManySpecials",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addSpecial",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "arePartsLocked",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "backCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "backDecorationCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "backDecorations",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "backgroundCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "backgroundDecorationCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "backgroundDecorations",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "backgrounds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "backs",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "chokerCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chokers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "clotheCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "clothes",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "dataURI",
    values: [PromiseOrValue<BigNumberish>, INounsSeeder.SeedStruct]
  ): string;
  encodeFunctionData(functionFragment: "earCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ears",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "generateSVGImage",
    values: [INounsSeeder.SeedStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "genericDataURI",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      INounsSeeder.SeedStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "hairCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hairs",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "hatCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hats",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "headphoneCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "headphones",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isDataURIEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "leftHandCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "leftHands",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "lockParts", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "palettes",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseURI",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "specialCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "specials",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleDataURIEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [PromiseOrValue<BigNumberish>, INounsSeeder.SeedStruct]
  ): string;

  decodeFunctionResult(functionFragment: "addBack", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addBackDecoration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addBackground",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addBackgroundDecoration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addChoker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addClothes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addColorToPalette",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addEar", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addHair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addHat", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addHeadphone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLeftHand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addManyBackDecorations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addManyBackgroundDecorations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addManyBackgrounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addManyBacks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addManyChokers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addManyClothes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addManyColorsToPalette",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addManyEars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addManyHairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addManyHats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addManyHeadphones",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addManyLeftHands",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addManySpecials",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addSpecial", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "arePartsLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "backCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "backDecorationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "backDecorations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "backgroundCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "backgroundDecorationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "backgroundDecorations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "backgrounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "backs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "chokerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chokers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clotheCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "clothes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dataURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "earCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ears", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "generateSVGImage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genericDataURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hairCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hairs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hatCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hats", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "headphoneCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "headphones", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDataURIEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "leftHandCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "leftHands", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockParts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "palettes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "specialCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "specials", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleDataURIEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;

  events: {
    "BaseURIUpdated(string)": EventFragment;
    "DataURIToggled(bool)": EventFragment;
    "PartsLocked()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BaseURIUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DataURIToggled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PartsLocked"): EventFragment;
}

export interface BaseURIUpdatedEventObject {
  baseURI: string;
}
export type BaseURIUpdatedEvent = TypedEvent<
  [string],
  BaseURIUpdatedEventObject
>;

export type BaseURIUpdatedEventFilter = TypedEventFilter<BaseURIUpdatedEvent>;

export interface DataURIToggledEventObject {
  enabled: boolean;
}
export type DataURIToggledEvent = TypedEvent<
  [boolean],
  DataURIToggledEventObject
>;

export type DataURIToggledEventFilter = TypedEventFilter<DataURIToggledEvent>;

export interface PartsLockedEventObject {}
export type PartsLockedEvent = TypedEvent<[], PartsLockedEventObject>;

export type PartsLockedEventFilter = TypedEventFilter<PartsLockedEvent>;

export interface INounsDescriptor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: INounsDescriptorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addBack(
      body: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addBackDecoration(
      body: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addBackground(
      background: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addBackgroundDecoration(
      body: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addChoker(
      body: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addClothes(
      body: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addColorToPalette(
      paletteIndex: PromiseOrValue<BigNumberish>,
      color: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addEar(
      body: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addHair(
      body: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addHat(
      body: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addHeadphone(
      body: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addLeftHand(
      body: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addManyBackDecorations(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addManyBackgroundDecorations(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addManyBackgrounds(
      backgrounds: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addManyBacks(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addManyChokers(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addManyClothes(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addManyColorsToPalette(
      paletteIndex: PromiseOrValue<BigNumberish>,
      newColors: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addManyEars(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addManyHairs(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addManyHats(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addManyHeadphones(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addManyLeftHands(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addManySpecials(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addSpecial(
      body: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    arePartsLocked(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    backCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    backDecorationCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    backDecorations(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    backgroundCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    backgroundDecorationCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    backgroundDecorations(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    backgrounds(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    backs(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    baseURI(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    chokerCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    chokers(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    clotheCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    clothes(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    dataURI(
      tokenId: PromiseOrValue<BigNumberish>,
      seed: INounsSeeder.SeedStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    earCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    ears(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    generateSVGImage(
      seed: INounsSeeder.SeedStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    genericDataURI(
      name: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      seed: INounsSeeder.SeedStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hairCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    hairs(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hatCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    hats(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    headphoneCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    headphones(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isDataURIEnabled(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    leftHandCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    leftHands(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    lockParts(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    palettes(
      paletteIndex: PromiseOrValue<BigNumberish>,
      colorIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setBaseURI(
      baseURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    specialCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    specials(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    toggleDataURIEnabled(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      seed: INounsSeeder.SeedStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  addBack(
    body: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addBackDecoration(
    body: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addBackground(
    background: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addBackgroundDecoration(
    body: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addChoker(
    body: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addClothes(
    body: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addColorToPalette(
    paletteIndex: PromiseOrValue<BigNumberish>,
    color: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addEar(
    body: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addHair(
    body: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addHat(
    body: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addHeadphone(
    body: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addLeftHand(
    body: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addManyBackDecorations(
    bodies: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addManyBackgroundDecorations(
    bodies: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addManyBackgrounds(
    backgrounds: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addManyBacks(
    bodies: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addManyChokers(
    bodies: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addManyClothes(
    bodies: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addManyColorsToPalette(
    paletteIndex: PromiseOrValue<BigNumberish>,
    newColors: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addManyEars(
    bodies: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addManyHairs(
    bodies: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addManyHats(
    bodies: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addManyHeadphones(
    bodies: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addManyLeftHands(
    bodies: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addManySpecials(
    bodies: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addSpecial(
    body: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  arePartsLocked(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  backCount(overrides?: CallOverrides): Promise<BigNumber>;

  backDecorationCount(overrides?: CallOverrides): Promise<BigNumber>;

  backDecorations(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  backgroundCount(overrides?: CallOverrides): Promise<BigNumber>;

  backgroundDecorationCount(overrides?: CallOverrides): Promise<BigNumber>;

  backgroundDecorations(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  backgrounds(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  backs(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  baseURI(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  chokerCount(overrides?: CallOverrides): Promise<BigNumber>;

  chokers(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  clotheCount(overrides?: CallOverrides): Promise<BigNumber>;

  clothes(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  dataURI(
    tokenId: PromiseOrValue<BigNumberish>,
    seed: INounsSeeder.SeedStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  earCount(overrides?: CallOverrides): Promise<BigNumber>;

  ears(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  generateSVGImage(
    seed: INounsSeeder.SeedStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  genericDataURI(
    name: PromiseOrValue<string>,
    description: PromiseOrValue<string>,
    seed: INounsSeeder.SeedStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  hairCount(overrides?: CallOverrides): Promise<BigNumber>;

  hairs(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  hatCount(overrides?: CallOverrides): Promise<BigNumber>;

  hats(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  headphoneCount(overrides?: CallOverrides): Promise<BigNumber>;

  headphones(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  isDataURIEnabled(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  leftHandCount(overrides?: CallOverrides): Promise<BigNumber>;

  leftHands(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  lockParts(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  palettes(
    paletteIndex: PromiseOrValue<BigNumberish>,
    colorIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  setBaseURI(
    baseURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  specialCount(overrides?: CallOverrides): Promise<BigNumber>;

  specials(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  toggleDataURIEnabled(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenURI(
    tokenId: PromiseOrValue<BigNumberish>,
    seed: INounsSeeder.SeedStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    addBack(
      body: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    addBackDecoration(
      body: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    addBackground(
      background: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addBackgroundDecoration(
      body: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    addChoker(
      body: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    addClothes(
      body: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    addColorToPalette(
      paletteIndex: PromiseOrValue<BigNumberish>,
      color: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addEar(
      body: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    addHair(
      body: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    addHat(
      body: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    addHeadphone(
      body: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    addLeftHand(
      body: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    addManyBackDecorations(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addManyBackgroundDecorations(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addManyBackgrounds(
      backgrounds: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addManyBacks(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addManyChokers(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addManyClothes(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addManyColorsToPalette(
      paletteIndex: PromiseOrValue<BigNumberish>,
      newColors: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addManyEars(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addManyHairs(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addManyHats(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addManyHeadphones(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addManyLeftHands(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addManySpecials(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addSpecial(
      body: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    arePartsLocked(overrides?: CallOverrides): Promise<boolean>;

    backCount(overrides?: CallOverrides): Promise<BigNumber>;

    backDecorationCount(overrides?: CallOverrides): Promise<BigNumber>;

    backDecorations(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    backgroundCount(overrides?: CallOverrides): Promise<BigNumber>;

    backgroundDecorationCount(overrides?: CallOverrides): Promise<BigNumber>;

    backgroundDecorations(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    backgrounds(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    backs(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    baseURI(overrides?: CallOverrides): Promise<string>;

    chokerCount(overrides?: CallOverrides): Promise<BigNumber>;

    chokers(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    clotheCount(overrides?: CallOverrides): Promise<BigNumber>;

    clothes(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    dataURI(
      tokenId: PromiseOrValue<BigNumberish>,
      seed: INounsSeeder.SeedStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    earCount(overrides?: CallOverrides): Promise<BigNumber>;

    ears(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    generateSVGImage(
      seed: INounsSeeder.SeedStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    genericDataURI(
      name: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      seed: INounsSeeder.SeedStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    hairCount(overrides?: CallOverrides): Promise<BigNumber>;

    hairs(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    hatCount(overrides?: CallOverrides): Promise<BigNumber>;

    hats(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    headphoneCount(overrides?: CallOverrides): Promise<BigNumber>;

    headphones(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    isDataURIEnabled(overrides?: CallOverrides): Promise<boolean>;

    leftHandCount(overrides?: CallOverrides): Promise<BigNumber>;

    leftHands(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    lockParts(overrides?: CallOverrides): Promise<void>;

    palettes(
      paletteIndex: PromiseOrValue<BigNumberish>,
      colorIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    setBaseURI(
      baseURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    specialCount(overrides?: CallOverrides): Promise<BigNumber>;

    specials(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    toggleDataURIEnabled(overrides?: CallOverrides): Promise<void>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      seed: INounsSeeder.SeedStruct,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "BaseURIUpdated(string)"(baseURI?: null): BaseURIUpdatedEventFilter;
    BaseURIUpdated(baseURI?: null): BaseURIUpdatedEventFilter;

    "DataURIToggled(bool)"(enabled?: null): DataURIToggledEventFilter;
    DataURIToggled(enabled?: null): DataURIToggledEventFilter;

    "PartsLocked()"(): PartsLockedEventFilter;
    PartsLocked(): PartsLockedEventFilter;
  };

  estimateGas: {
    addBack(
      body: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addBackDecoration(
      body: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addBackground(
      background: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addBackgroundDecoration(
      body: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addChoker(
      body: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addClothes(
      body: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addColorToPalette(
      paletteIndex: PromiseOrValue<BigNumberish>,
      color: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addEar(
      body: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addHair(
      body: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addHat(
      body: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addHeadphone(
      body: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addLeftHand(
      body: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addManyBackDecorations(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addManyBackgroundDecorations(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addManyBackgrounds(
      backgrounds: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addManyBacks(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addManyChokers(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addManyClothes(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addManyColorsToPalette(
      paletteIndex: PromiseOrValue<BigNumberish>,
      newColors: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addManyEars(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addManyHairs(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addManyHats(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addManyHeadphones(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addManyLeftHands(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addManySpecials(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addSpecial(
      body: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    arePartsLocked(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    backCount(overrides?: CallOverrides): Promise<BigNumber>;

    backDecorationCount(overrides?: CallOverrides): Promise<BigNumber>;

    backDecorations(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    backgroundCount(overrides?: CallOverrides): Promise<BigNumber>;

    backgroundDecorationCount(overrides?: CallOverrides): Promise<BigNumber>;

    backgroundDecorations(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    backgrounds(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    backs(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseURI(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    chokerCount(overrides?: CallOverrides): Promise<BigNumber>;

    chokers(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clotheCount(overrides?: CallOverrides): Promise<BigNumber>;

    clothes(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dataURI(
      tokenId: PromiseOrValue<BigNumberish>,
      seed: INounsSeeder.SeedStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    earCount(overrides?: CallOverrides): Promise<BigNumber>;

    ears(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    generateSVGImage(
      seed: INounsSeeder.SeedStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    genericDataURI(
      name: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      seed: INounsSeeder.SeedStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hairCount(overrides?: CallOverrides): Promise<BigNumber>;

    hairs(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hatCount(overrides?: CallOverrides): Promise<BigNumber>;

    hats(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    headphoneCount(overrides?: CallOverrides): Promise<BigNumber>;

    headphones(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDataURIEnabled(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    leftHandCount(overrides?: CallOverrides): Promise<BigNumber>;

    leftHands(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockParts(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    palettes(
      paletteIndex: PromiseOrValue<BigNumberish>,
      colorIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBaseURI(
      baseURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    specialCount(overrides?: CallOverrides): Promise<BigNumber>;

    specials(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toggleDataURIEnabled(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      seed: INounsSeeder.SeedStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addBack(
      body: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addBackDecoration(
      body: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addBackground(
      background: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addBackgroundDecoration(
      body: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addChoker(
      body: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addClothes(
      body: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addColorToPalette(
      paletteIndex: PromiseOrValue<BigNumberish>,
      color: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addEar(
      body: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addHair(
      body: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addHat(
      body: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addHeadphone(
      body: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addLeftHand(
      body: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addManyBackDecorations(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addManyBackgroundDecorations(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addManyBackgrounds(
      backgrounds: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addManyBacks(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addManyChokers(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addManyClothes(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addManyColorsToPalette(
      paletteIndex: PromiseOrValue<BigNumberish>,
      newColors: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addManyEars(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addManyHairs(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addManyHats(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addManyHeadphones(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addManyLeftHands(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addManySpecials(
      bodies: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addSpecial(
      body: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    arePartsLocked(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    backCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    backDecorationCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    backDecorations(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    backgroundCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    backgroundDecorationCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    backgroundDecorations(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    backgrounds(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    backs(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseURI(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    chokerCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chokers(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    clotheCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    clothes(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dataURI(
      tokenId: PromiseOrValue<BigNumberish>,
      seed: INounsSeeder.SeedStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    earCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ears(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    generateSVGImage(
      seed: INounsSeeder.SeedStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    genericDataURI(
      name: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      seed: INounsSeeder.SeedStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hairCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hairs(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hatCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hats(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    headphoneCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    headphones(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDataURIEnabled(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    leftHandCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    leftHands(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockParts(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    palettes(
      paletteIndex: PromiseOrValue<BigNumberish>,
      colorIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      baseURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    specialCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    specials(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toggleDataURIEnabled(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      seed: INounsSeeder.SeedStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
