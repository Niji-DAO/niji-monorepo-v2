/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  NFTDescriptorV2,
  NFTDescriptorV2Interface,
} from "../../../contracts/libs/NFTDescriptorV2";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ISVGRenderer",
        name: "renderer",
        type: "ISVGRenderer",
      },
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "description",
            type: "string",
          },
          {
            internalType: "string",
            name: "background",
            type: "string",
          },
          {
            components: [
              {
                internalType: "bytes",
                name: "image",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "palette",
                type: "bytes",
              },
            ],
            internalType: "struct ISVGRenderer.Part[]",
            name: "parts",
            type: "tuple[]",
          },
        ],
        internalType: "struct NFTDescriptorV2.TokenURIParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "constructTokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ISVGRenderer",
        name: "renderer",
        type: "ISVGRenderer",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "bytes",
                name: "image",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "palette",
                type: "bytes",
              },
            ],
            internalType: "struct ISVGRenderer.Part[]",
            name: "parts",
            type: "tuple[]",
          },
          {
            internalType: "string",
            name: "background",
            type: "string",
          },
        ],
        internalType: "struct ISVGRenderer.SVGParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "generateSVGImage",
    outputs: [
      {
        internalType: "string",
        name: "svg",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001a576109899081610020823930815050f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c90816322cc1ad61461003a57506392ba0e901461003557600080fd5b6102fb565b600319906040368301126100d5576100506100dc565b916024359167ffffffffffffffff918284116100d85760409084360301126100d55761007c60c0604052565b82600401358281116100d85761009890600436918601016101d3565b60805260248301359182116100d5576100d16100c5856100bd3686880160040161018c565b60a052610880565b604051918291826102e7565b0390f35b80fd5b5080fd5b600435906001600160a01b03821682036100f257565b600080fd5b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761012957604052565b6100f7565b90601f8019910116810190811067ffffffffffffffff82111761012957604052565b604051906080820182811067ffffffffffffffff82111761012957604052565b67ffffffffffffffff811161012957601f01601f191660200190565b81601f820112156100f2578035906101a382610170565b926101b1604051948561012e565b828452602083830101116100f257816000926020809301838601378301015290565b81601f820112156100f25780359067ffffffffffffffff92838311610129578260051b604080519560209561020a8785018961012e565b87528580880193860101948486116100f257868101935b86851061023357505050505050505090565b84358381116100f25782019084601f1983890301126100f2578451906102588261010d565b898301358581116100f257888b6102719286010161018c565b825285830135918583116100f257610290898c8096958196010161018c565b83820152815201940193610221565b60005b8381106102b25750506000910152565b81810151838201526020016102a2565b906020916102db8151809281855285808601910161029f565b601f01601f1916010190565b9060206102f89281815201906102c2565b90565b6003196040368201126100f2576103106100dc565b6024359067ffffffffffffffff928383116100f25760809083360301126100f257610339610150565b9082600401358481116100f257610356906004369186010161018c565b825260248301358481116100f257610374906004369186010161018c565b602083015260448301358481116100f257610395906004369186010161018c565b604083015260648301359384116100f2576103bc6100c59360046100d196369201016101d3565b60608301526103dd565b906103d96020928281519485920161029f565b0190565b9060608101519060409283820151908451936103f88561010d565b84526020918285019081528551948591635ea01e6360e01b835284600484015260648301915191886024850152825180915260848401908660848260051b8701019401916000905b888c8484106105ca575050505050508261046b600095938293516023198483030160448501526102c2565b03916001600160a01b03165afa80156105c5576104f8946105678361054e6105406104a5610598966102f89a6000916105a4575b5061072c565b6104f86105176104fe868c519c01516104f86104da8b519e8f9a683d913730b6b2911d1160b91b908c015260298b01906103c6565b71111610113232b9b1b934b83a34b7b7111d1160711b815260120190565b906103c6565b6c1116101134b6b0b3b2911d101160991b8152600d0190565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000008152601a0190565b61227d60f01b815260020190565b0394610562601f199687810183528261012e565b61072c565b90519586938401601d907f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081520190565b0390810183528261012e565b6105bf913d8091833e6105b7818361012e565b810190610815565b3861049f565b610874565b610606908293959798600195979a608319908203018752836105f68c51938451908085528401906102c2565b92015190848184039101526102c2565b970192019201899594939192610440565b604051906020820182811067ffffffffffffffff8211176101295760405260008252565b604051906060820182811067ffffffffffffffff82111761012957604052604082527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f6040837f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201520152565b634e487b7160e01b600052601160045260246000fd5b90600282018092116106cf57565b6106ab565b90602082018092116106cf57565b600281901b91906001600160fe1b038116036106cf57565b9061070482610170565b610711604051918261012e565b8281528092610722601f1991610170565b0190602036910137565b80511561080c5761073b61063b565b61075761075261074b84516106c1565b6003900490565b6106e2565b91610769610764846106d4565b6106fa565b92835280815182019060208501935b8282106107ba575050506003905106806001146107a95760021461079a575090565b603d60f81b6000199091015290565b50613d3d60f01b6001199091015290565b9091936004906003809401938451600190603f9082828260121c16880101518553828282600c1c16880101518386015382828260061c1688010151600286015316850101519082015301939190610778565b506102f8610617565b6020818303126100f25780519067ffffffffffffffff82116100f2570181601f820112156100f257805161084881610170565b92610856604051948561012e565b818452602082840101116100f2576102f8916020808501910161029f565b6040513d6000823e3d90fd5b60409081518092635ea01e6360e01b82526020908160048401526064830160805192826024860152835180925260848501928160848460051b8801019501936000915b848310610911575050505050509181806108ed60009560a0516023198483030160448501526102c2565b03916001600160a01b03165afa80156105c5576102f8916000916105a4575061072c565b919395838096985061093f60019395926083198d82030187528a5190836105f68351898452898401906102c2565b9801930193019092889695939492946108c356fea2646970667358221220ab4d9a95109818c9254081b1a5111905022276ec080d5cdb45054c78825c4cf464736f6c63430008140033";

type NFTDescriptorV2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NFTDescriptorV2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NFTDescriptorV2__factory extends ContractFactory {
  constructor(...args: NFTDescriptorV2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<NFTDescriptorV2> {
    return super.deploy(overrides || {}) as Promise<NFTDescriptorV2>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): NFTDescriptorV2 {
    return super.attach(address) as NFTDescriptorV2;
  }
  override connect(signer: Signer): NFTDescriptorV2__factory {
    return super.connect(signer) as NFTDescriptorV2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NFTDescriptorV2Interface {
    return new utils.Interface(_abi) as NFTDescriptorV2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NFTDescriptorV2 {
    return new Contract(address, _abi, signerOrProvider) as NFTDescriptorV2;
  }
}
